Teradata 2: Joininng tables


1. Left Join: Syntax

    SELECT *
    FROM table1
        LEFT [ OUTER ] JOIN table2
        ON table1.column_name=table2.column_name;

Example 1:
    SELECT company.company_id,company.company_name, company.company_city,foods.company_id,foods.item_name
    FROM  company
	        LEFT JOIN foods
	        ON company.company_id = foods.company_id;
This SQL statement would return all rows from the company table and only those rows from the foods table where the joined fields are equal and if the ON clause matches no records in the 'foods' table, the join will still return rows, but the NULL in each column of the right table. 

Example 2:
    SELECT a.bill_no, b.item_name, a.bill_amt 
    FROM counter_sale a 
	       LEFT JOIN foods b 
	       ON a.item_id=b.item_id 
    WHERE  a.bill_amt>500;

This SQL statement will first join all rows from the counter_sale table and only those rows from the foods table where the joined fields are equal and if the ON clause matches no records in the foods table, the join will still return rows, but the NULL in each column of right table, therefore eliminates those rows which bill amount is less than or equal to 500.


2. Left Join using multiple tables:

    SELECT a.bill_no, b.item_name,c.company_name, 
	         c.company_city, a.bill_amt 
    FROM counter_sale a 
	       LEFT JOIN foods b ON a.item_id=b.item_id 
	       LEFT JOIN company c ON b.company_id=c.company_id
    WHERE c.company_name IS NOT NULL
    ORDER BY a.bill_no;

This SQL statement will first join all rows from the counter_sale table and only those rows from the foods table where the joined fields are matching and if the ON clause matches no records in the foods table, the join will still return rows, but the NULL in each column of the right table. Therefore this result will join with company table and all rows from result table and matched and unmatched rows from company table will also come, but for the unmatched rows of company table, the column value will be NULL. Therefore the WHERE clause will eliminate those rows which company name column value is NULL and after that, the ORDER BY clause will arrange the rows in ascending order according to the bill number. 

-	There is actually no difference between a left join and a left outer join – both of them refer to the similar operation in SQL.
    SELECT company.company_id,company.company_name,
	      foods.item_id, foods.item_name, foods.company_id 
    FROM company 
        LEFT JOIN foods 
        ON company.company_id = foods.company_id;

    SELECT company.company_id,company.company_name,
	      foods.item_id, foods.item_name, foods.company_id 
    FROM company 
        LEFT OUTER JOIN foods 
        ON company.company_id = foods.company_id;

Running the SQL with the "outer" keyword, would give us the exact same results as running the SQL without the “outer”. Here the SQL statement with "outer" with "left join".
